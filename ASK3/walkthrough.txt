Σε αυτή την άσκηση θα εξετάσουμε μια ευπάθεια γνωστή ως "format string vulnerability".
Ο κώδικας που δίνεται, δέχεται απλά ένα string από τον χρήστη ως argument κατά την
εκτέλεση του προγράμματος και το τυπώνει. 
Αν αντί για κανονικό string πληκτρολογήσουμε "%d" βλέπουμε ότι παίρνουμε έναν αριθμό
ως αποτέλεσμα. Αυτός ο αριθμός είναι μια τυχαία τιμή που βρίσκει το printf στη στοίβα.
Αν τώρα πατήσουμε "%χ" βλέπουμε ότι τυπώνεται μια σειρά αριθμών και γραμμάτων. Αυτός
ο αριθμός αντιπροσωπεύει διεύθυνση στοίβας.
Αυτό μας προιδεάζει οτι έχουμε να κάνουμε με memory leak vulnerability και μπορούμε
μέσω αυτού να διαβάσουμε ότι θέλουμε από τη στοίβα.
Κοιτάζοντας στο manpage του print, βλέπουμε ότι αν το περιεχόμενο του print προέρχεται
από μη-έμπειστο user input, τότε μπορεί να περιέχει το "%n" το οποίο θα προκαλέσει
το print να γράψει κάτι μέσα στη μνήμη προκαλώντας έτσι κενό ασφαλείας.
Για παράδειγμα με την εντολή :
printf("something %n",&var)
αποθηκεύουμε το μήκος της λέξης "something" μέσα στη μεταβλητή var. 
Πιο συγκεκριμένα, χρησιμοποιώντας &var δημιουργούμε ένα δείκτη που δείχνει στη 
διεύθυνση της var στη στοίβα. Οπότε, η διεύθυνση στη στοίβα θα χρησιμοποιηθεί σαν
τοποθεσία πάνω στην οποία θα γράψει η printf.
Συνεχίζοντας τώρα με την πρόκληση, μπορούμε να χρησιμοποιήσουμε την εντολή 
objdump -t [binary_name] για να τυπώσουμε τον κώδικα σε πιο low level μορφή.
Εντοπίζουμε τη διεύθυνση της μεταβλητής target.
Στα σημερινά συστήματα λίνουξ, υπάρχει ένα μέτρο ασφαλείας που λέγεται "ASLR".
To "ASLR" εμποδίζει τους επιτιθέμενους να τελέσουν buffer overflow επιθέσεις,
κάνοντας την τοποθεσία στην οποία φορτώνονται εκτελέσιμα στοιχεία στη μνήμη τυχαία.
Για τους σκοπούς της άσκησης, το ASLR δεν εφαρμόζεται εδώ.
Για να αναγκάσουμε την printf να γράψει κάτι στη διεύθυνση του target, πρέπει να πρώτα να βρούμε τη διεύθυνση αυτή στη
στοίβα.
Χρησιμοποιούμε την εντολή:
./vuln "`python -c "print ('%x '*100)"`"
και βλέπουμε ότι παίρνουμε 100 τιμές τις στοίβας σε hex.
Με αυτή τη μέθοδο μπορούμε να βάλουμε τη διεύθυνση του target στη στοίβα από μόνοι
μας βάζοντας στη μέσα στο string μας. Χρησιμοποιώντας την εντολή :
./vuln "`python -c "print ('AAAA'+'\x38\x96\x04\x88'+'BBBB'+'%x '*100)"`"
Ο λόγος που περικλύουμε τη διεύθυνση γύρω από Α και Β είναι για να εντοπίσουμε
τη διεύθυνση που ψάχνουμε πιο εύκολα. Το ΑΑΑΑ θα εμφανιστεί ως 414141 και το BBBB ως 424242
Το επόμενο βήμα είναι να πειραματιστούμε με τον αριθμό των διευθύνσεων που τυπώνουμε
μεχρι η διεύθυνση του target να είναι η τελευταία που εμφανίζεται.
Μόλις βρούμε το σωστό αριθμό διευθύνσεων (πχ 127) γράφουμε πάλι την προηγούμενη
εντολή, μόνο που τώρα αντικαθιστούμε το %x με το %n για να γράψουμε πάνω στη διεύθυνση.
./vuln "`python -c "print ('AAAA'+'\x38\x96\x04\x88'+'BBBB'+'%x '*127+'%n ')"`"x08'

